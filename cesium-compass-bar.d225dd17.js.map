{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,QCKA,OAAM,UAAyB,EAAA,UAAS,CACtC,WAAW,YAAa,CACtB,MAAO,CACL,MAAO,CAAE,KAAM,MAAO,EACtB,QAAS,CAAE,KAAM,MAAO,CAC1B,CACF,CAEA,WAAW,QAAS,CAClB,MAAO,AAAA,CAAA,EAAA,EAAA,GAAE,AAAF,CAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4CX,CAAC,AACH,CAEA,aAAc,CACZ,KAAK,GAKL,IAAI,CAAC,KAAK,CAKV,IAAI,CAAC,sBAAsB,CAAG,IAChC,CAEA,SAAU,CACJ,IAAI,CAAC,KAAK,EAAI,CAAC,IAAI,CAAC,sBAAsB,EAC5C,CAAA,IAAI,CAAC,sBAAsB,CAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,gBAAgB,CAClE,KACE,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,AAC1C,EAAA,CAGN,CAEA,aAAa,CAAK,CAAE,CAElB,IAAI,EAAY,IACV,EAAe,CAAC,IAAI,CAAC,OAAO,CAAI,CAAA,KAAK,EAAE,CAAG,CAAA,EAAK,EAC/C,EAAW,EAAe,EAQhC,OANI,EAAW,IACb,CAAA,GAAa,GADf,EAGI,EAAW,GACb,CAAA,GAAa,GADf,EAGO,CAAC,qBAAqB,EAAE,AAXjB,IAWiB,EAAuB,EAAU,GAAG,CAAC,AACtE,CAEA,QAAS,CACP,IAAM,EAAQ,AAAA,CAAA,EAAA,EAAA,IAAG,AAAH,CAAI,CAAC;;QAEf,EAAE,MAAM,GACL,IAAI,GACJ,GAAG,CAAC,IAAM,AAAA,CAAA,EAAA,EAAA,IAAG,AAAH,CAAI,CAAC,WAAW,CAAC,EAAE;;IAEpC,CAAC,CACD,MAAO,AAAA,CAAA,EAAA,EAAA,IAAG,AAAH,CAAI,CAAC;;;qBAGK,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG;;YAEhC,EAAE,EAAM;;qBAEC,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG;;YAEhC,EAAE,EAAM;;qBAEC,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG;;YAEhC,EAAE,EAAM;;qBAEC,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG;;YAEhC,EAAE,EAAM;;qBAEC,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG;;YAEhC,EAAE,EAAM;;qBAEC,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI;;YAEjC,EAAE,EAAM;;qBAEC,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI;;YAEjC,EAAE,EAAM;;qBAEC,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI;;YAEjC,EAAE,EAAM;;;;;IAKhB,CAAC,AACH,CACF,CAEA,eAAe,MAAM,CAAC,qBAAsB","sources":["<anon>","packages/cesium-compass-bar/cesium-compass-bar.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5532\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5532\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $800sp = parcelRequire(\"800sp\");\n// FIXME: configurable width\n// FIXME: configurable styling with css part\nclass $98d8933019691929$var$CesiumCompassBar extends (0, $800sp.LitElement) {\n    static get properties() {\n        return {\n            scene: {\n                type: Object\n            },\n            heading: {\n                type: Number\n            }\n        };\n    }\n    static get styles() {\n        return (0, $800sp.css)`\n      :host {\n        --cesium-compass-bar-tick-color: #000;\n      }\n      :host * {\n        box-sizing: content-box;\n      }\n      .container {\n        display: flex;\n        justify-content: center;\n        height: 100%;\n        overflow: hidden;\n      }\n      .compass-bar {\n        display: flex;\n      }\n      .compass-bar > div {\n        width: 100px;\n        text-align: center;\n      }\n      .label {\n        padding: 4px;\n        color: var(--cesium-compass-bar-tick-color);\n      }\n      .grid {\n        display: flex;\n        justify-content: space-around;\n        align-items: flex-end;\n      }\n      .grid > div {\n        width: 1px;\n        height: 6px;\n        background-color: var(--cesium-compass-bar-tick-color);\n      }\n      .grid > div:nth-child(4) {\n        height: 10px;\n      }\n      .center-tick {\n        margin: auto;\n        width: 4px;\n        height: 4px;\n        border-radius: 50%;\n        background-color: var(--cesium-compass-bar-tick-color);\n      }\n    `;\n    }\n    constructor(){\n        super();\n        /**\n     * @type {import('cesium').Scene}\n     */ this.scene;\n        /**\n     * @type {import('cesium').Event.RemoveCallback}\n     */ this.unlistenFromPostRender = null;\n    }\n    updated() {\n        if (this.scene && !this.unlistenFromPostRender) this.unlistenFromPostRender = this.scene.postRender.addEventListener(()=>{\n            this.heading = this.scene.camera.heading;\n        });\n    }\n    getTransform(index) {\n        const width = 100;\n        let translate = -width / 2;\n        const visibleIndex = -this.heading / (Math.PI / 4) + 4;\n        const distance = visibleIndex - index;\n        if (distance < -4) translate += 8 * width;\n        if (distance > 4) translate -= 8 * width;\n        return `transform: translate(${visibleIndex * width + translate}px)`;\n    }\n    render() {\n        const ticks = (0, $800sp.html)`\n      <div class=\"grid\">\n        ${Array(7).fill().map(()=>(0, $800sp.html)`<div></div>`)}\n      </div>\n    `;\n        return (0, $800sp.html)`\n      <div class=\"container\">\n        <div class=\"compass-bar\">\n          <div style=${this.getTransform(4)}>\n            <div class=\"label\">N</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(3)}>\n            <div class=\"label\">NE</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(2)}>\n            <div class=\"label\">E</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(1)}>\n            <div class=\"label\">SE</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(0)}>\n            <div class=\"label\">S</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(-1)}>\n            <div class=\"label\">SW</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(-2)}>\n            <div class=\"label\">W</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(-3)}>\n            <div class=\"label\">NW</div>\n            ${ticks}\n          </div>\n        </div>\n      </div>\n      <div class=\"center-tick\"></div>\n    `;\n    }\n}\ncustomElements.define(\"cesium-compass-bar\", $98d8933019691929$var$CesiumCompassBar);\n\n\n//# sourceMappingURL=cesium-compass-bar.d225dd17.js.map\n","import { LitElement, css, html } from \"lit\";\n\n// FIXME: configurable width\n// FIXME: configurable styling with css part\n\nclass CesiumCompassBar extends LitElement {\n  static get properties() {\n    return {\n      scene: { type: Object },\n      heading: { type: Number },\n    };\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        --cesium-compass-bar-tick-color: #000;\n      }\n      :host * {\n        box-sizing: content-box;\n      }\n      .container {\n        display: flex;\n        justify-content: center;\n        height: 100%;\n        overflow: hidden;\n      }\n      .compass-bar {\n        display: flex;\n      }\n      .compass-bar > div {\n        width: 100px;\n        text-align: center;\n      }\n      .label {\n        padding: 4px;\n        color: var(--cesium-compass-bar-tick-color);\n      }\n      .grid {\n        display: flex;\n        justify-content: space-around;\n        align-items: flex-end;\n      }\n      .grid > div {\n        width: 1px;\n        height: 6px;\n        background-color: var(--cesium-compass-bar-tick-color);\n      }\n      .grid > div:nth-child(4) {\n        height: 10px;\n      }\n      .center-tick {\n        margin: auto;\n        width: 4px;\n        height: 4px;\n        border-radius: 50%;\n        background-color: var(--cesium-compass-bar-tick-color);\n      }\n    `;\n  }\n\n  constructor() {\n    super();\n\n    /**\n     * @type {import('cesium').Scene}\n     */\n    this.scene;\n\n    /**\n     * @type {import('cesium').Event.RemoveCallback}\n     */\n    this.unlistenFromPostRender = null;\n  }\n\n  updated() {\n    if (this.scene && !this.unlistenFromPostRender) {\n      this.unlistenFromPostRender = this.scene.postRender.addEventListener(\n        () => {\n          this.heading = this.scene.camera.heading;\n        }\n      );\n    }\n  }\n\n  getTransform(index) {\n    const width = 100;\n    let translate = -width / 2;\n    const visibleIndex = -this.heading / (Math.PI / 4) + 4;\n    const distance = visibleIndex - index;\n\n    if (distance < -4) {\n      translate += 8 * width;\n    }\n    if (distance > 4) {\n      translate -= 8 * width;\n    }\n    return `transform: translate(${visibleIndex * width + translate}px)`;\n  }\n\n  render() {\n    const ticks = html`\n      <div class=\"grid\">\n        ${Array(7)\n          .fill()\n          .map(() => html`<div></div>`)}\n      </div>\n    `;\n    return html`\n      <div class=\"container\">\n        <div class=\"compass-bar\">\n          <div style=${this.getTransform(4)}>\n            <div class=\"label\">N</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(3)}>\n            <div class=\"label\">NE</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(2)}>\n            <div class=\"label\">E</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(1)}>\n            <div class=\"label\">SE</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(0)}>\n            <div class=\"label\">S</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(-1)}>\n            <div class=\"label\">SW</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(-2)}>\n            <div class=\"label\">W</div>\n            ${ticks}\n          </div>\n          <div style=${this.getTransform(-3)}>\n            <div class=\"label\">NW</div>\n            ${ticks}\n          </div>\n        </div>\n      </div>\n      <div class=\"center-tick\"></div>\n    `;\n  }\n}\n\ncustomElements.define(\"cesium-compass-bar\", CesiumCompassBar);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$800sp","$98d8933019691929$var$CesiumCompassBar","LitElement","properties","scene","type","Object","heading","Number","styles","css","constructor","unlistenFromPostRender","updated","postRender","addEventListener","camera","getTransform","index","translate","visibleIndex","Math","PI","distance","render","ticks","html","Array","fill","map","customElements","define"],"version":3,"file":"cesium-compass-bar.d225dd17.js.map"}